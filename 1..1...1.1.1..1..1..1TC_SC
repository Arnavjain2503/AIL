GAme Time and Space Complexity:
Time Complexity: The Min-Max algorithmâ€™s time complexity is O(b^d), where b is the branching factor (possible moves) and d is the depth (maximum depth of recursion). For Tic-Tac-Toe, the maximum depth is 9 (since the board has 9 spaces).

Space Complexity: The space complexity of the Min-Max algorithm is O(d), where d is the depth of the tree. For Tic-Tac-Toe, the space complexity is relatively low since the tree is small.

rec DFS non-rec DFS BFS
TC: O(V + E)
SC:O(V)
same for all three

BESTFS: 
tc:  O((V + E) log V)
sc: O(V)

ASTAR:
tc:O((V + E) log V)
sc:O(V)


NLP:
!pip install nltk textblob scikit-learn numpy pandas
import nltk
nltk.download('punkt')
nltk.download('punkt_tab')
nltk.download('stopwords')
nltk.download('wordnet')
You can install the autopep8 package using the following command in your Jupyter Notebook or Python environment:

!pip install autopep8
Once you run this command, it will automatically install the autopep8 package, which is a tool for automatically formatting Python code according to the PEP 8 style guide, including fixing indentation and other formatting issues.

How to Use autopep8:
From the command line: You can format a Python file by running:
autopep8 --in-place your_python_file.py
This will apply PEP 8 style fixes to the file, including indentation corrections.

In Jupyter Notebook: You can format a Python script (or code in a notebook) by using:

!autopep8 --in-place --aggressive <your_python_file.py>
The --aggressive flag makes more changes to the code, including more aggressive formatting.

Example: If you have a Python file named example.py with improper indentation and formatting, you can fix it like this:

bash
Copy
!autopep8 --in-place --aggressive example.py
