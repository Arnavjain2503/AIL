'''1. Modified Tic-Tac-Toe with Min-Max Algorithm (Computer Wins or Draws)
Theory:
Tic-Tac-Toe is a two-player game where one player plays with 'X' and the other with 'O'. The goal is to align three of your marks (either 'X' or 'O') in a row, column, or diagonal on a 3x3 grid. This version of the game implements the Min-Max algorithm to make optimal moves, ensuring that the AI (playing as 'X') always either wins or results in a draw, but never loses.

Min-Max Algorithm: This is a recursive algorithm used in decision-making and game theory. It is based on the idea of minimizing the possible loss for a worst-case scenario and maximizing the best outcome for a player. It assumes that both players play optimally. The algorithm explores all possible moves at each game state, and the computer chooses the one that leads to the best outcome.

Maximizing Player: The AI aims to maximize its score (winning).

Minimizing Player: The opponent (player 'O') aims to minimize the AI's score.

Algorithm:
Initial Setup:

Initialize the game board with 9 empty spaces.

The player is 'O' and the AI is 'X'.

Game Flow:

Player Move: The player makes their move by selecting a spot from 0 to 8.

AI Move: After the player makes a move, the AI uses the Min-Max algorithm to evaluate all possible moves and choose the best one.

The AI tries to maximize its chances of winning.

The algorithm assigns scores based on possible outcomes:

+1 if the AI wins.

-1 if the player wins.

0 if it’s a draw.

Min-Max Recursion:

If the game is over (i.e., there’s a winner or a draw), return a score based on the outcome.

If the AI is playing, it tries to maximize the score.

If the player is playing, it tries to minimize the score.

Game End Check:

After each move (whether by the player or the AI), the game checks if there is a winner or if it's a draw.

The game stops when a winner is determined or when there’s a draw.

2. Modified Tic-Tac-Toe with Min-Max Algorithm (Computer Loses or Draws)
Theory:
In this version, the AI (playing as 'X') will play in such a way that it either loses or draws the game, never winning. The AI uses the Min-Max algorithm, but this time, instead of maximizing its chances of winning, it minimizes its chances of winning. The AI will either let the player win or force a draw, ensuring that it never wins.

Min-Max Algorithm (with defensive strategy): The key change here is that the AI tries to force the player to win or end the game in a draw. The AI plays the minimizing role, which means it always tries to choose moves that force a loss or a draw.

Algorithm:
Initial Setup:

Initialize the game board with 9 empty spaces.

The player is 'O' and the AI is 'X'.

Game Flow:

Player Move: The player selects a spot from 0 to 8.

AI Move: The AI uses the Min-Max algorithm to decide its next move. Unlike the first implementation, the AI aims to minimize its chances of winning by:

Choosing a move that results in the lowest possible score, which ensures the AI will lose or draw.

Min-Max Recursion (with defensive play):

If the game is over (i.e., there’s a winner or a draw), return a score based on the outcome.

If the AI is playing, it tries to minimize its chances of winning by choosing moves that result in the lowest score.

The player, however, tries to maximize their chances of winning.

Game End Check:

After each move, the game checks if the game is over (either there’s a winner or a draw).

The game ends when the AI is forced to lose or the game results in a draw.

Summary of Key Differences:
Computer Wins or Draws: In this version, the AI uses the Min-Max algorithm to ensure that it plays optimally to win or draw, never losing.

Computer Loses or Draws: The AI plays defensively, using the Min-Max algorithm to minimize its chances of winning. The AI will either let the player win or force a draw, but it will never win.

Algorithm for Both Versions
Here’s a consolidated algorithm that works for both versions with their respective strategies:

Initialize Game:

Set up the 3x3 board with empty spaces.

Set the player’s symbol as 'O' and AI’s symbol as 'X'.

Game Loop:

Player’s Turn:

The player inputs a move (an index from 0 to 8).

If the move is valid (empty space), mark the player's symbol on the board.

AI’s Turn (for both versions):

Use the Min-Max algorithm to evaluate all possible moves.

For 'Computer Wins or Draws' version: The AI tries to maximize its score by selecting the best possible move.

For 'Computer Loses or Draws' version: The AI tries to minimize its score, thus either forcing a loss or a draw.

Check for Winner or Draw:

After each move (player or AI), check if there’s a winner or if the board is full (draw).

If a winner is found: End the game and declare the winner.

If no winner and no empty spaces left: Declare a draw.

Repeat the Process:

The game continues until a winner is found or a draw is reached.

Time and Space Complexity:
Time Complexity: The Min-Max algorithm’s time complexity is O(b^d), where b is the branching factor (possible moves) and d is the depth (maximum depth of recursion). For Tic-Tac-Toe, the maximum depth is 9 (since the board has 9 spaces).

Space Complexity: The space complexity of the Min-Max algorithm is O(d), where d is the depth of the tree. For Tic-Tac-Toe, the space complexity is relatively low since the tree is small.

'''
import random

# Function to check if the game is over
def check_winner(board):
    # Rows, columns, diagonals
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]              # Diagonals
    ]
    
    for combination in winning_combinations:
        if board[combination[0]] == board[combination[1]] == board[combination[2]] and board[combination[0]] != ' ':
            return board[combination[0]]  # X or O winner
    
    if ' ' not in board:
        return 'D'  # Draw
    
    return None  # Game is not over

# Min-Max Algorithm for the AI to make the best move
def min_max(board, depth, is_maximizing):
    winner = check_winner(board)
    
    # If the game is over, return score based on the winner
    if winner == 'X':  # AI (X) is maximizing
        return 1
    elif winner == 'O':  # Player (O) is minimizing
        return -1
    elif winner == 'D':  # Draw
        return 0
    
    if is_maximizing:
        best_score = -float('inf')
        for i in range(len(board)):
            if board[i] == ' ':
                board[i] = 'X'  # AI move
                score = min_max(board, depth + 1, False)
                board[i] = ' '  # Undo move
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(len(board)):
            if board[i] == ' ':
                board[i] = 'O'  # Player move
                score = min_max(board, depth + 1, True)
                board[i] = ' '  # Undo move
                best_score = min(score, best_score)
        return best_score

# Function to make the computer's move
def computer_move(board):
    best_score = -float('inf')
    best_move = None
    for i in range(len(board)):
        if board[i] == ' ':
            board[i] = 'X'  # AI move
            score = min_max(board, 0, False)
            board[i] = ' '  # Undo move
            if score > best_score:
                best_score = score
                best_move = i
    board[best_move] = 'X'

# Function to print the current game board
def print_board(board):
    print(f"{board[0]} | {board[1]} | {board[2]}")
    print("--+---+--")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("--+---+--")
    print(f"{board[6]} | {board[7]} | {board[8]}")

# Main game loop
def play_game():
    board = [' ' for _ in range(9)]
    print("Welcome to Modified Tic-Tac-Toe!")
    print("You are 'O' and the computer is 'X'.")
    
    while True:
        # Player move
        print_board(board)
        move = int(input("Enter your move (0-8): "))
        if board[move] == ' ':
            board[move] = 'O'
        else:
            print("Invalid move. Try again.")
            continue
        
        # Check if the game is over after player's move
        winner = check_winner(board)
        if winner:
            print_board(board)
            if winner == 'O':
                print("You win!")
            elif winner == 'X':
                print("Computer wins!")
            else:
                print("It's a draw!")
            break
        
        # Computer move
        computer_move(board)
        
        # Check if the game is over after computer's move
        winner = check_winner(board)
        if winner:
            print_board(board)
            if winner == 'O':
                print("You win!")
            elif winner == 'X':
                print("Computer wins!")
            else:
                print("It's a draw!")
            break

# Start the game
if __name__ == "__main__":
    play_game()

