# -*- coding: utf-8 -*-
"""FuzzyLogic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zZA65irQ1Gm2h-fm8unWp1DB40vy9Z1w
"""

'''Theory:
Fuzzy set theory is an extension of classical set theory, where each element in a set has a degree of membership, ranging from 0 (non-membership) to 1 (full membership). This allows for a more flexible representation of uncertainty and vagueness.

In fuzzy logic, the following basic operations are used to manipulate fuzzy sets:

Union: The union of two fuzzy sets
𝐴
A and
𝐵
B, denoted as
𝐴
∪
𝐵
A∪B, is defined as the fuzzy set whose membership function is the maximum of the corresponding membership functions of
𝐴
A and
𝐵
B:

𝜇
𝐴
∪
𝐵
(
𝑥
)
=
max
⁡
(
𝜇
𝐴
(
𝑥
)
,
𝜇
𝐵
(
𝑥
)
)
μ
A∪B
​
 (x)=max(μ
A
​
 (x),μ
B
​
 (x))
Intersection: The intersection of two fuzzy sets
𝐴
A and
𝐵
B, denoted as
𝐴
∩
𝐵
A∩B, is defined as the fuzzy set whose membership function is the minimum of the corresponding membership functions of
𝐴
A and
𝐵
B:

𝜇
𝐴
∩
𝐵
(
𝑥
)
=
min
⁡
(
𝜇
𝐴
(
𝑥
)
,
𝜇
𝐵
(
𝑥
)
)
μ
A∩B
​
 (x)=min(μ
A
​
 (x),μ
B
​
 (x))
Complement: The complement of a fuzzy set
𝐴
A, denoted as
𝐴
′
A
′
 , is a fuzzy set whose membership function is the complement of the membership function of
𝐴
A:

𝜇
𝐴
′
(
𝑥
)
=
1
−
𝜇
𝐴
(
𝑥
)
μ
A
′

​
 (x)=1−μ
A
​
 (x)
Algorithm for Fuzzy Set Operations:
Input:

Two fuzzy sets
𝐴
A and
𝐵
B, each with
𝑛
n elements.

Union of Fuzzy Sets:

For each corresponding element in the sets, take the maximum membership value.

𝐴
∪
𝐵
=
max
⁡
(
𝐴
,
𝐵
)
A∪B=max(A,B)
Intersection of Fuzzy Sets:

For each corresponding element in the sets, take the minimum membership value.

𝐴
∩
𝐵
=
min
⁡
(
𝐴
,
𝐵
)
A∩B=min(A,B)
Complement of Fuzzy Sets:

For each element in the set, subtract the membership value from 1.

𝐴
′
=
1
−
𝐴
,

𝐵
′
=
1
−
𝐵
A
′
 =1−A,B
′
 =1−B
Output:

The union, intersection, and complement of the sets
𝐴
A and
𝐵
B.

'''
import numpy as np

# Function to ask user for fuzzy set values for all sets
def get_fuzzy_sets_input():
    n = int(input("Enter the number of elements in the fuzzy sets: "))
    sets = []
    for i in range(3):
        print(f"Enter membership values for Fuzzy Set {i+1}:")
        elements = []
        for j in range(n):
            value = float(input(f"Enter membership value for element {j+1} (between 0 and 1): "))
            elements.append(value)
        sets.append(np.array(elements))
    return sets

# Function to compute complement of a fuzzy set
def complement(fuzzy_set):
    return 1 - fuzzy_set

# Function to compute union of two fuzzy sets
def union(fuzzy_set1, fuzzy_set2):
    return np.maximum(fuzzy_set1, fuzzy_set2)

# Function to compute intersection of two fuzzy sets
def intersection(fuzzy_set1, fuzzy_set2):
    return np.minimum(fuzzy_set1, fuzzy_set2)

def main_program_12():
    print("Program 12: Fuzzy Set Operations - Union, Intersection and Complement with 3 fuzzy sets")

    fuzzy_sets = get_fuzzy_sets_input()

    fuzzy_set1, fuzzy_set2, fuzzy_set3 = fuzzy_sets

    print("Fuzzy Set 1:", fuzzy_set1)
    print("Fuzzy Set 2:", fuzzy_set2)
    print("Fuzzy Set 3:", fuzzy_set3)

    # Union of all three sets
    union_result = union(union(fuzzy_set1, fuzzy_set2), fuzzy_set3)
    print("Union of all three sets:", union_result)

    # Intersection of all three sets
    intersection_result = intersection(intersection(fuzzy_set1, fuzzy_set2), fuzzy_set3)
    print("Intersection of all three sets:", intersection_result)

    # Complement of all three sets
    complement_result1 = complement(fuzzy_set1)
    complement_result2 = complement(fuzzy_set2)
    complement_result3 = complement(fuzzy_set3)

    print("Complement of Fuzzy Set 1:", complement_result1)
    print("Complement of Fuzzy Set 2:", complement_result2)
    print("Complement of Fuzzy Set 3:", complement_result3)

if __name__ == "__main__":
    main_program_12()

'''Experiment 2: De Morgan’s Law (Complement of Union)
Theory:
De Morgan’s Law for fuzzy sets involves two operations that relate the complement of the union and the intersection of the complements. The law states:

𝐴
∪
𝐵
‾
=
𝐴
‾
∩
𝐵
‾
A∪B
 =
A
 ∩
B

In words, the complement of the union of two sets is equal to the intersection of the complements of the sets.

This law helps in simplifying fuzzy set operations and is used extensively in fuzzy logic systems for decision-making, control systems, and artificial intelligence.

Algorithm for De Morgan’s Law (Complement of Union):
Input:

Two fuzzy sets
𝐴
A and
𝐵
B with membership values.

Union of Fuzzy Sets:

Compute the union of the sets by taking the maximum membership value for each element.

𝐴
∪
𝐵
=
max
⁡
(
𝐴
,
𝐵
)
A∪B=max(A,B)
Complement of the Union:

Compute the complement of the union by subtracting the union result from 1.

𝐴
∪
𝐵
‾
=
1
−
(
𝐴
∪
𝐵
)
A∪B
 =1−(A∪B)
Complement of Fuzzy Sets:

Compute the complement of each fuzzy set
𝐴
A and
𝐵
B.

𝐴
‾
=
1
−
𝐴
,

𝐵
‾
=
1
−
𝐵
A
 =1−A,
B
 =1−B
Intersection of the Complements:

Compute the intersection of the complements by taking the minimum membership value for each element.

𝐴
‾
∩
𝐵
‾
=
min
⁡
(
𝐴
‾
,
𝐵
‾
)
A
 ∩
B
 =min(
A
 ,
B
 )
Output:

Verify if the complement of the union is equal to the intersection of the complements.

𝐴
∪
𝐵
‾
=
𝐴
‾
∩
𝐵
‾
A∪B
 =
A
 ∩
B
'''
import numpy as np

# Function to ask user for fuzzy set values for both sets
def get_fuzzy_sets_input():
    n = int(input("Enter the number of elements in the fuzzy sets: "))
    sets = []
    for i in range(2):
        print(f"Enter membership values for Fuzzy Set {i+1}:")
        elements = []
        for j in range(n):
            while True:
                value = float(input(f"Enter membership value for element {j+1} (between 0 and 1): "))
                if 0 <= value <= 1:
                    elements.append(value)
                    break
                else:
                    print("Invalid input! Please enter a value between 0 and 1.")
        sets.append(np.array(elements))
    return sets

# Function to compute complement of a fuzzy set
def complement(fuzzy_set):
    return 1 - fuzzy_set

# Function to compute union of two fuzzy sets
def union(fuzzy_set1, fuzzy_set2):
    return np.maximum(fuzzy_set1, fuzzy_set2)

# Function to compute intersection of two fuzzy sets
def intersection(fuzzy_set1, fuzzy_set2):
    return np.minimum(fuzzy_set1, fuzzy_set2)

def main_program_2():
    print("Program: Demonstrate De Morgan’s Law (Complement of Union)")

    fuzzy_sets = get_fuzzy_sets_input()
    A, B = fuzzy_sets

    print("\nFuzzy Set A:", A)
    # Complement of A
    A_complement = complement(A)
    print("Complement of A (A'):", A_complement)

    print("\nFuzzy Set B:", B)
    # Complement of B
    B_complement = complement(B)
    print("Complement of B (B'):", B_complement)

    # Intersection of A' and B' (De Morgan's Law 2)
    A_complement_intersection_B_complement = intersection(A_complement, B_complement)
    print("\nIntersection of the complements (A' ∩ B'):", A_complement_intersection_B_complement)

    # Union of A and B
    A_union_B = union(A, B)
    print("\nUnion of A and B (A ∪ B):", A_union_B)

    # Complement of the union (De Morgan's Law 2)
    complement_A_union_B = complement(A_union_B)
    print("Complement of union (A ∪ B)':", complement_A_union_B)


    # Showing the comparison of both sides of De Morgan's Law
    print("\nDe Morgan's Law (Complement of Union):")
    print(f"Complement of Union (A ∪ B)': {complement_A_union_B}")
    print(f"Intersection of Complements (A' ∩ B'): {A_complement_intersection_B_complement}")

    # Verify De Morgan's Law (Complement of Union = Intersection of Complements)
    if np.allclose(complement_A_union_B, A_complement_intersection_B_complement):
        print("\nDe Morgan's Law (Complement of Union) holds!")
    else:
        print("\nDe Morgan's Law (Complement of Union) does not hold.")

if __name__ == "__main__":
    main_program_2()
0

'''Theory:
De Morgan’s Law for the complement of the intersection states:

𝐴
∩
𝐵
‾
=
𝐴
‾
∪
𝐵
‾
A∩B
 =
A
 ∪
B

In words, the complement of the intersection of two fuzzy sets is equal to the union of the complements of the sets.

This law is also very important for simplifying fuzzy set operations and plays a crucial role in logical operations, decision-making systems, and fuzzy logic control.

Algorithm for De Morgan’s Law (Complement of Intersection):
Input:

Two fuzzy sets
𝐴
A and
𝐵
B with membership values.

Intersection of Fuzzy Sets:

Compute the intersection of the sets by taking the minimum membership value for each element.

𝐴
∩
𝐵
=
min
⁡
(
𝐴
,
𝐵
)
A∩B=min(A,B)
Complement of the Intersection:

Compute the complement of the intersection by subtracting the intersection result from 1.

𝐴
∩
𝐵
‾
=
1
−
(
𝐴
∩
𝐵
)
A∩B
 =1−(A∩B)
Complement of Fuzzy Sets:

Compute the complement of each fuzzy set
𝐴
A and
𝐵
B.

𝐴
‾
=
1
−
𝐴
,

𝐵
‾
=
1
−
𝐵
A
 =1−A,
B
 =1−B
Union of the Complements:

Compute the union of the complements by taking the maximum membership value for each element.

𝐴
‾
∪
𝐵
‾
=
max
⁡
(
𝐴
‾
,
𝐵
‾
)
A
 ∪
B
 =max(
A
 ,
B
 )
Output:

Verify if the complement of the intersection is equal to the union of the complements.

𝐴
∩
𝐵
‾
=
𝐴
‾
∪
𝐵
‾
A∩B
 =
A
 ∪
B

Summary of Algorithms for All Experiments:
Fuzzy Set Operations (Union, Intersection, Complement):

Compute the union, intersection, and complement of fuzzy sets using maximum, minimum, and subtraction operations.

De Morgan’s Law (Complement of Union):

Compute the union of the fuzzy sets, take its complement, and verify if it equals the intersection of the complements.

De Morgan’s Law (Complement of Intersection):

Compute the intersection of the fuzzy sets, take its complement, and verify if it equals the union of the complements.

'''
import numpy as np

# Function to ask user for fuzzy set values for both sets
def get_fuzzy_sets_input():
    n = int(input("Enter the number of elements in the fuzzy sets: "))
    sets = []
    for i in range(2):
        print(f"Enter membership values for Fuzzy Set {i+1}:")
        elements = []
        for j in range(n):
            while True:
                value = float(input(f"Enter membership value for element {j+1} (between 0 and 1): "))
                if 0 <= value <= 1:
                    elements.append(value)
                    break
                else:
                    print("Invalid input! Please enter a value between 0 and 1.")
        sets.append(np.array(elements))
    return sets

# Function to compute complement of a fuzzy set
def complement(fuzzy_set):
    return 1 - fuzzy_set

# Function to compute union of two fuzzy sets
def union(fuzzy_set1, fuzzy_set2):
    return np.maximum(fuzzy_set1, fuzzy_set2)

# Function to compute intersection of two fuzzy sets
def intersection(fuzzy_set1, fuzzy_set2):
    return np.minimum(fuzzy_set1, fuzzy_set2)

def main_program():
    print("Program: Demonstrate De Morgan’s Law (Complement of Intersection)")

    fuzzy_sets = get_fuzzy_sets_input()
    A, B = fuzzy_sets

    print("\nFuzzy Set A:", A)
    # Complement of A
    A_complement = complement(A)
    print("Complement of A (A'):", A_complement)

    print("\nFuzzy Set B:", B)
    # Complement of B
    B_complement = complement(B)
    print("Complement of B (B'):", B_complement)

    # Union of the complements of A and B (De Morgan's Law 1)
    A_complement_union_B_complement = union(A_complement, B_complement)
    print("\nUnion of the complements (A' ∪ B'):", A_complement_union_B_complement)

    # Intersection of A and B
    A_intersection_B = intersection(A, B)
    print("\nIntersection of A and B (A ∩ B):", A_intersection_B)

    # Complement of the intersection (De Morgan's Law 1)
    complement_A_intersection_B = complement(A_intersection_B)
    print("Complement of intersection (A ∩ B)':", complement_A_intersection_B)

    # Showing the comparison of both sides of De Morgan's Law
    print("\nDe Morgan's Law (Complement of Intersection):")
    print(f"Complement of Intersection (A ∩ B)': {complement_A_intersection_B}")
    print(f"Union of Complements (A' ∪ B'): {A_complement_union_B_complement}")

    # Verify De Morgan's Law (Complement of Intersection = Union of Complements)
    if np.allclose(complement_A_intersection_B, A_complement_union_B_complement):
        print("\nDe Morgan's Law (Complement of Intersection) holds!")
    else:
        print("\nDe Morgan's Law (Complement of Intersection) does not hold.")

if __name__ == "__main__":
    main_program()